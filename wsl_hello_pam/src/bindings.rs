#![allow(clippy::all)]
/* Based on bindings automatically generated by rust-bindgen */

pub const PAM_SUCCESS: ::std::os::raw::c_int = 0;
pub const PAM_OPEN_ERR: ::std::os::raw::c_int = 1;
pub const PAM_SYMBOL_ERR: ::std::os::raw::c_int = 2;
pub const PAM_SERVICE_ERR: ::std::os::raw::c_int = 3;
pub const PAM_SYSTEM_ERR: ::std::os::raw::c_int = 4;
pub const PAM_BUF_ERR: ::std::os::raw::c_int = 5;
pub const PAM_PERM_DENIED: ::std::os::raw::c_int = 6;
pub const PAM_AUTH_ERR: ::std::os::raw::c_int = 7;
pub const PAM_CRED_INSUFFICIENT: ::std::os::raw::c_int = 8;
pub const PAM_AUTHINFO_UNAVAIL: ::std::os::raw::c_int = 9;
pub const PAM_USER_UNKNOWN: ::std::os::raw::c_int = 10;
pub const PAM_MAXTRIES: ::std::os::raw::c_int = 11;
pub const PAM_NEW_AUTHTOK_REQD: ::std::os::raw::c_int = 12;
pub const PAM_ACCT_EXPIRED: ::std::os::raw::c_int = 13;
pub const PAM_SESSION_ERR: ::std::os::raw::c_int = 14;
pub const PAM_CRED_UNAVAIL: ::std::os::raw::c_int = 15;
pub const PAM_CRED_EXPIRED: ::std::os::raw::c_int = 16;
pub const PAM_CRED_ERR: ::std::os::raw::c_int = 17;
pub const PAM_NO_MODULE_DATA: ::std::os::raw::c_int = 18;
pub const PAM_CONV_ERR: ::std::os::raw::c_int = 19;
pub const PAM_AUTHTOK_ERR: ::std::os::raw::c_int = 20;
pub const PAM_AUTHTOK_RECOVERY_ERR: ::std::os::raw::c_int = 21;
pub const PAM_AUTHTOK_LOCK_BUSY: ::std::os::raw::c_int = 22;
pub const PAM_AUTHTOK_DISABLE_AGING: ::std::os::raw::c_int = 23;
pub const PAM_TRY_AGAIN: ::std::os::raw::c_int = 24;
pub const PAM_IGNORE: ::std::os::raw::c_int = 25;
pub const PAM_ABORT: ::std::os::raw::c_int = 26;
pub const PAM_AUTHTOK_EXPIRED: ::std::os::raw::c_int = 27;
pub const PAM_MODULE_UNKNOWN: ::std::os::raw::c_int = 28;
pub const PAM_BAD_ITEM: ::std::os::raw::c_int = 29;
pub const PAM_CONV_AGAIN: ::std::os::raw::c_int = 30;
pub const PAM_INCOMPLETE: ::std::os::raw::c_int = 31;
pub const PAM_SILENT: ::std::os::raw::c_int = 32768;
pub const PAM_DISALLOW_NULL_AUTHTOK: ::std::os::raw::c_int = 1;
pub const PAM_ESTABLISH_CRED: ::std::os::raw::c_int = 2;
pub const PAM_DELETE_CRED: ::std::os::raw::c_int = 4;
pub const PAM_REINITIALIZE_CRED: ::std::os::raw::c_int = 8;
pub const PAM_REFRESH_CRED: ::std::os::raw::c_int = 16;
pub const PAM_CHANGE_EXPIRED_AUTHTOK: ::std::os::raw::c_int = 32;
pub const PAM_SERVICE: ::std::os::raw::c_int = 1;
pub const PAM_USER: ::std::os::raw::c_int = 2;
pub const PAM_TTY: ::std::os::raw::c_int = 3;
pub const PAM_RHOST: ::std::os::raw::c_int = 4;
pub const PAM_CONV: ::std::os::raw::c_int = 5;
pub const PAM_AUTHTOK: ::std::os::raw::c_int = 6;
pub const PAM_OLDAUTHTOK: ::std::os::raw::c_int = 7;
pub const PAM_RUSER: ::std::os::raw::c_int = 8;
pub const PAM_USER_PROMPT: ::std::os::raw::c_int = 9;
pub const PAM_FAIL_DELAY: ::std::os::raw::c_int = 10;
pub const PAM_XDISPLAY: ::std::os::raw::c_int = 11;
pub const PAM_XAUTHDATA: ::std::os::raw::c_int = 12;
pub const PAM_AUTHTOK_TYPE: ::std::os::raw::c_int = 13;
pub const PAM_DATA_SILENT: ::std::os::raw::c_int = 1073741824;
pub const PAM_PROMPT_ECHO_OFF: ::std::os::raw::c_int = 1;
pub const PAM_PROMPT_ECHO_ON: ::std::os::raw::c_int = 2;
pub const PAM_ERROR_MSG: ::std::os::raw::c_int = 3;
pub const PAM_TEXT_INFO: ::std::os::raw::c_int = 4;
pub const PAM_RADIO_TYPE: ::std::os::raw::c_int = 5;
pub const PAM_BINARY_PROMPT: ::std::os::raw::c_int = 7;
pub const PAM_MAX_NUM_MSG: ::std::os::raw::c_int = 32;
pub const PAM_MAX_MSG_SIZE: ::std::os::raw::c_int = 512;
pub const PAM_MAX_RESP_SIZE: ::std::os::raw::c_int = 512;
pub const PAM_AUTHTOK_RECOVER_ERR: ::std::os::raw::c_int = 21;
pub const PAM_PRELIM_CHECK: ::std::os::raw::c_int = 16384;
pub const PAM_UPDATE_AUTHTOK: ::std::os::raw::c_int = 8192;
pub const PAM_DATA_REPLACE: ::std::os::raw::c_int = 536870912;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pam_handle {
    _unused: [u8; 0],
}
pub type pam_handle_t = pam_handle;
extern "C" {
    pub fn pam_set_item(
        pamh: *mut pam_handle_t,
        item_type: ::std::os::raw::c_int,
        item: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pam_get_item(
        pamh: *const pam_handle_t,
        item_type: ::std::os::raw::c_int,
        item: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pam_strerror(
        pamh: *mut pam_handle_t,
        errnum: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pam_putenv(
        pamh: *mut pam_handle_t,
        name_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pam_getenv(
        pamh: *mut pam_handle_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pam_getenvlist(pamh: *mut pam_handle_t) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pam_fail_delay(
        pamh: *mut pam_handle_t,
        musec_delay: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pam_message {
    pub msg_style: ::std::os::raw::c_int,
    pub msg: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pam_message() {
    assert_eq!(
        ::std::mem::size_of::<pam_message>(),
        16usize,
        concat!("Size of: ", stringify!(pam_message))
    );
    assert_eq!(
        ::std::mem::align_of::<pam_message>(),
        8usize,
        concat!("Alignment of ", stringify!(pam_message))
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_message)).msg_style as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_message),
            "::",
            stringify!(msg_style)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_message)).msg as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_message),
            "::",
            stringify!(msg)
        )
    );
}
impl Clone for pam_message {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pam_response {
    pub resp: *mut ::std::os::raw::c_char,
    pub resp_retcode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pam_response() {
    assert_eq!(
        ::std::mem::size_of::<pam_response>(),
        16usize,
        concat!("Size of: ", stringify!(pam_response))
    );
    assert_eq!(
        ::std::mem::align_of::<pam_response>(),
        8usize,
        concat!("Alignment of ", stringify!(pam_response))
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_response)).resp as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_response),
            "::",
            stringify!(resp)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_response)).resp_retcode as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_response),
            "::",
            stringify!(resp_retcode)
        )
    );
}
impl Clone for pam_response {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pam_conv {
    pub conv: ::std::option::Option<
        unsafe extern "C" fn(
            num_msg: ::std::os::raw::c_int,
            msg: *mut *const pam_message,
            resp: *mut *mut pam_response,
            appdata_ptr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub appdata_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pam_conv() {
    assert_eq!(
        ::std::mem::size_of::<pam_conv>(),
        16usize,
        concat!("Size of: ", stringify!(pam_conv))
    );
    assert_eq!(
        ::std::mem::align_of::<pam_conv>(),
        8usize,
        concat!("Alignment of ", stringify!(pam_conv))
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_conv)).conv as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_conv),
            "::",
            stringify!(conv)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_conv)).appdata_ptr as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_conv),
            "::",
            stringify!(appdata_ptr)
        )
    );
}
impl Clone for pam_conv {
    fn clone(&self) -> Self {
        *self
    }
}

#[repr(C)]
#[derive(Debug, Copy)]
pub struct pam_xauth_data {
    pub namelen: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub datalen: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
}

#[test]
fn bindgen_test_layout_pam_xauth_data() {
    assert_eq!(
        ::std::mem::size_of::<pam_xauth_data>(),
        32usize,
        concat!("Size of: ", stringify!(pam_xauth_data))
    );
    assert_eq!(
        ::std::mem::align_of::<pam_xauth_data>(),
        8usize,
        concat!("Alignment of ", stringify!(pam_xauth_data))
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_xauth_data)).namelen as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_xauth_data),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_xauth_data)).name as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_xauth_data),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_xauth_data)).datalen as *const _ as usize },
        16usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_xauth_data),
            "::",
            stringify!(datalen)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const pam_xauth_data)).data as *const _ as usize },
        24usize,
        concat!(
            "Alignment of field: ",
            stringify!(pam_xauth_data),
            "::",
            stringify!(data)
        )
    );
}
impl Clone for pam_xauth_data {
    fn clone(&self) -> Self {
        *self
    }
}

#[link(name = "pam")]
extern "C" {
    pub fn pam_start(
        service_name: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
        pam_conversation: *const pam_conv,
        pamh: *mut *mut pam_handle_t,
    ) -> ::std::os::raw::c_int;

    pub fn pam_end(
        pamh: *mut pam_handle_t,
        pam_status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn pam_authenticate(
        pamh: *mut pam_handle_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn pam_setcred(
        pamh: *mut pam_handle_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn pam_acct_mgmt(
        pamh: *mut pam_handle_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn pam_open_session(
        pamh: *mut pam_handle_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn pam_close_session(
        pamh: *mut pam_handle_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn pam_chauthtok(
        pamh: *mut pam_handle_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    pub fn pam_set_data(
        pamh: *mut pam_handle_t,
        module_data_name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        cleanup: ::std::option::Option<
            unsafe extern "C" fn(
                pamh: *mut pam_handle_t,
                data: *mut ::std::os::raw::c_void,
                error_status: ::std::os::raw::c_int,
            ),
        >,
    ) -> ::std::os::raw::c_int;

    pub fn pam_get_data(
        pamh: *const pam_handle_t,
        module_data_name: *const ::std::os::raw::c_char,
        data: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn pam_get_user(
        pamh: *mut pam_handle_t,
        user: *mut *const ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}

/*
extern "C" {
    pub fn pam_sm_authenticate(pamh: *mut pam_handle_t,
                               flags: ::std::os::raw::c_int,
                               argc: ::std::os::raw::c_int,
                               argv: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pam_sm_setcred(pamh: *mut pam_handle_t,
                          flags: ::std::os::raw::c_int,
                          argc: ::std::os::raw::c_int,
                          argv: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pam_sm_acct_mgmt(pamh: *mut pam_handle_t,
                            flags: ::std::os::raw::c_int,
                            argc: ::std::os::raw::c_int,
                            argv: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pam_sm_open_session(pamh: *mut pam_handle_t,
                               flags: ::std::os::raw::c_int,
                               argc: ::std::os::raw::c_int,
                               argv: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pam_sm_close_session(pamh: *mut pam_handle_t,
                                flags: ::std::os::raw::c_int,
                                argc: ::std::os::raw::c_int,
                                argv: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pam_sm_chauthtok(pamh: *mut pam_handle_t,
                            flags: ::std::os::raw::c_int,
                            argc: ::std::os::raw::c_int,
                            argv: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
*/
